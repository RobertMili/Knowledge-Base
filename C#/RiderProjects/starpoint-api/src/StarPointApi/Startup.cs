using Collector.Common.RestClient;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using BoostApp.Shared;
using StarPointApi.Apis.Steps;
using StarPointApi.Repository;
using StarPointApi.Services.CronJobs;
using StarPointApi.Services.CronJobs.ServiceExtention;
using StarPointApi.Services.StarPointService;
using StarPointApi.Shared;
using System;
using Microsoft.Extensions.Azure;
using Azure.Messaging.ServiceBus;
using BoostApp.Shared.Messaging;
using System.Xml.Serialization;
using StarPointApi.Services.MessageService;


namespace StarPointApi
{
    public class Startup
    {
        // Constructor for the Startup class, taking IConfiguration and IHostingEnvironment as parameters
        public Startup(IConfiguration configuration, IHostingEnvironment env)
        {
            Configuration = configuration;
            CurrentEnvironment = env;
        }

        // Property for storing the current environment
        private IHostingEnvironment CurrentEnvironment { get; }

        // Property for storing the configuration
        public IConfiguration Configuration { get; }

        // Method for configuring the services used by the application
        public void ConfigureServices(IServiceCollection services)
        {
            // Enable CORS
            services.AddCors();
            // Configure MVC and disable endpoint routing
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2)
                .AddMvcOptions(options => options.EnableEndpointRouting = false);

            services.AddSingleton<IRepository>(
                new Repository.StorageRepository(Configuration["Storage:ConnectionString"]));
            services.AddApplicationInsightsTelemetry(Configuration["Storage:Key"]);

            // Add services to the dependency injection container
            services.AddSingleton<IStarPointService, StarPointService>();
            // Add azure ad token validation (See appsetting.json for AD-Config) 
            services.AddEasyAzureJwtAuth(Configuration);
            // Add autogenerated swagger-documentation (See appsettings.json for Swagger config) 
            services.AddEasySwagger(Configuration);
            // Add ServiceBusClient by using the AddAzureClients extension method
            services.AddAzureClients(clientHelper =>
            {
                clientHelper.AddServiceBusClient(Configuration["ServiceBus:ConnectionString"]);
            });
            // Add ServiceBusSender by getting the ServiceBusClient and calling the CreateSender method
            services.AddSingleton<ServiceBusSender>(serviceProvider =>
                serviceProvider.GetRequiredService<ServiceBusClient>()
                    .CreateSender(Configuration["ServiceBus:QueueName"]));

            services.AddSingleton<IMessagePublisher, MessagePublisher>();

            services.AddSingleton<IMessageService, MessageService>();

            // If CRONJOB is not set to "disable", schedule a GetStepsJob to run either every 5 seconds or every day at 3am
            if (Configuration["CRONJOB"]?.ToLower() != "disable")
            {
                var cronExpression =
                    CurrentEnvironment.IsDevelopment()
                        ? @"*/5 * * * * *"
                        : @"0 0 3 * * *"; // Every 5 sec or every day at 3am

                services.AddCronJob<GetStepsJob>(x =>
                {
                    x.TimeZoneInfo = TimeZoneInfo.Utc;
                    x.CronExpression = cronExpression;
                });
            }

            // Build the RestClient from the appsettings.json file
            var section = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json")
                .Build()
                .GetSection("RestClient");

            var restApiClient = new ApiClientBuilder()
                .ConfigureFromConfigSection(section)
                .Build(); // The client returned here should be used/registered as a singleton.
            services.AddSingleton(restApiClient);
        }

        // Method for configuring the application's request pipeline
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            // Configure authentication and add swagger
            app.UseCors(op => op.AllowAnyOrigin());
            app.UseEasyAuthSwaggerSetup(env, Configuration);
        }
    }
}